// <auto-generated />
using EFCore3AndCSharp8.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCore3AndCSharp8.Migrations
{
    [DbContext(typeof(CatsDbContext))]
    [Migration("20200223153521_CatsDemoDb_First_1")]
    partial class CatsDemoDb_First_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFCore3AndCSharp8.Models.Cat", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("CatId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cats");

                    b.HasData(
                        new
                        {
                            CatId = 1,
                            Name = "Hamlet",
                            OwnerId = 1
                        },
                        new
                        {
                            CatId = 2,
                            Name = "King Lear",
                            OwnerId = 1
                        },
                        new
                        {
                            CatId = 3,
                            Name = "Othello",
                            OwnerId = 1
                        },
                        new
                        {
                            CatId = 4,
                            Name = "Hamlet1",
                            OwnerId = 2
                        },
                        new
                        {
                            CatId = 5,
                            Name = "King Lear1",
                            OwnerId = 2
                        },
                        new
                        {
                            CatId = 6,
                            Name = "Othello1",
                            OwnerId = 2
                        });
                });

            modelBuilder.Entity("EFCore3AndCSharp8.Models.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            OwnerId = 1,
                            Name = "Hasan"
                        },
                        new
                        {
                            OwnerId = 2,
                            Name = "Faisan"
                        });
                });

            modelBuilder.Entity("EFCore3AndCSharp8.Models.Cat", b =>
                {
                    b.HasOne("EFCore3AndCSharp8.Models.Owner", "Owner")
                        .WithMany("Cats")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
